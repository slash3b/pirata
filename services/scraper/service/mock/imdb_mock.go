// Code generated by MockGen. DO NOT EDIT.
// Source: ../../common/proto/imdb_grpc.pb.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	proto "common/proto"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockIMDBClient is a mock of IMDBClient interface.
type MockIMDBClient struct {
	ctrl     *gomock.Controller
	recorder *MockIMDBClientMockRecorder
}

// MockIMDBClientMockRecorder is the mock recorder for MockIMDBClient.
type MockIMDBClientMockRecorder struct {
	mock *MockIMDBClient
}

// NewMockIMDBClient creates a new mock instance.
func NewMockIMDBClient(ctrl *gomock.Controller) *MockIMDBClient {
	mock := &MockIMDBClient{ctrl: ctrl}
	mock.recorder = &MockIMDBClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIMDBClient) EXPECT() *MockIMDBClientMockRecorder {
	return m.recorder
}

// GetFilm mocks base method.
func (m *MockIMDBClient) GetFilm(ctx context.Context, in *proto.FilmTitle, opts ...grpc.CallOption) (*proto.Film, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFilm", varargs...)
	ret0, _ := ret[0].(*proto.Film)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilm indicates an expected call of GetFilm.
func (mr *MockIMDBClientMockRecorder) GetFilm(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilm", reflect.TypeOf((*MockIMDBClient)(nil).GetFilm), varargs...)
}

// MockIMDBServer is a mock of IMDBServer interface.
type MockIMDBServer struct {
	ctrl     *gomock.Controller
	recorder *MockIMDBServerMockRecorder
}

// MockIMDBServerMockRecorder is the mock recorder for MockIMDBServer.
type MockIMDBServerMockRecorder struct {
	mock *MockIMDBServer
}

// NewMockIMDBServer creates a new mock instance.
func NewMockIMDBServer(ctrl *gomock.Controller) *MockIMDBServer {
	mock := &MockIMDBServer{ctrl: ctrl}
	mock.recorder = &MockIMDBServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIMDBServer) EXPECT() *MockIMDBServerMockRecorder {
	return m.recorder
}

// GetFilm mocks base method.
func (m *MockIMDBServer) GetFilm(arg0 context.Context, arg1 *proto.FilmTitle) (*proto.Film, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilm", arg0, arg1)
	ret0, _ := ret[0].(*proto.Film)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilm indicates an expected call of GetFilm.
func (mr *MockIMDBServerMockRecorder) GetFilm(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilm", reflect.TypeOf((*MockIMDBServer)(nil).GetFilm), arg0, arg1)
}

// mustEmbedUnimplementedIMDBServer mocks base method.
func (m *MockIMDBServer) mustEmbedUnimplementedIMDBServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedIMDBServer")
}

// mustEmbedUnimplementedIMDBServer indicates an expected call of mustEmbedUnimplementedIMDBServer.
func (mr *MockIMDBServerMockRecorder) mustEmbedUnimplementedIMDBServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedIMDBServer", reflect.TypeOf((*MockIMDBServer)(nil).mustEmbedUnimplementedIMDBServer))
}

// MockUnsafeIMDBServer is a mock of UnsafeIMDBServer interface.
type MockUnsafeIMDBServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeIMDBServerMockRecorder
}

// MockUnsafeIMDBServerMockRecorder is the mock recorder for MockUnsafeIMDBServer.
type MockUnsafeIMDBServerMockRecorder struct {
	mock *MockUnsafeIMDBServer
}

// NewMockUnsafeIMDBServer creates a new mock instance.
func NewMockUnsafeIMDBServer(ctrl *gomock.Controller) *MockUnsafeIMDBServer {
	mock := &MockUnsafeIMDBServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeIMDBServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeIMDBServer) EXPECT() *MockUnsafeIMDBServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedIMDBServer mocks base method.
func (m *MockUnsafeIMDBServer) mustEmbedUnimplementedIMDBServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedIMDBServer")
}

// mustEmbedUnimplementedIMDBServer indicates an expected call of mustEmbedUnimplementedIMDBServer.
func (mr *MockUnsafeIMDBServerMockRecorder) mustEmbedUnimplementedIMDBServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedIMDBServer", reflect.TypeOf((*MockUnsafeIMDBServer)(nil).mustEmbedUnimplementedIMDBServer))
}
