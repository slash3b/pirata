// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: imdb.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IMDBClient is the client API for IMDB service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IMDBClient interface {
	GetFilms(ctx context.Context, in *FilmTitles, opts ...grpc.CallOption) (IMDB_GetFilmsClient, error)
}

type iMDBClient struct {
	cc grpc.ClientConnInterface
}

func NewIMDBClient(cc grpc.ClientConnInterface) IMDBClient {
	return &iMDBClient{cc}
}

func (c *iMDBClient) GetFilms(ctx context.Context, in *FilmTitles, opts ...grpc.CallOption) (IMDB_GetFilmsClient, error) {
	stream, err := c.cc.NewStream(ctx, &IMDB_ServiceDesc.Streams[0], "/imdb.IMDB/GetFilms", opts...)
	if err != nil {
		return nil, err
	}
	x := &iMDBGetFilmsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type IMDB_GetFilmsClient interface {
	Recv() (*Film, error)
	grpc.ClientStream
}

type iMDBGetFilmsClient struct {
	grpc.ClientStream
}

func (x *iMDBGetFilmsClient) Recv() (*Film, error) {
	m := new(Film)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// IMDBServer is the server API for IMDB service.
// All implementations must embed UnimplementedIMDBServer
// for forward compatibility
type IMDBServer interface {
	GetFilms(*FilmTitles, IMDB_GetFilmsServer) error
	mustEmbedUnimplementedIMDBServer()
}

// UnimplementedIMDBServer must be embedded to have forward compatible implementations.
type UnimplementedIMDBServer struct {
}

func (UnimplementedIMDBServer) GetFilms(*FilmTitles, IMDB_GetFilmsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetFilms not implemented")
}
func (UnimplementedIMDBServer) mustEmbedUnimplementedIMDBServer() {}

// UnsafeIMDBServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IMDBServer will
// result in compilation errors.
type UnsafeIMDBServer interface {
	mustEmbedUnimplementedIMDBServer()
}

func RegisterIMDBServer(s grpc.ServiceRegistrar, srv IMDBServer) {
	s.RegisterService(&IMDB_ServiceDesc, srv)
}

func _IMDB_GetFilms_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FilmTitles)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(IMDBServer).GetFilms(m, &iMDBGetFilmsServer{stream})
}

type IMDB_GetFilmsServer interface {
	Send(*Film) error
	grpc.ServerStream
}

type iMDBGetFilmsServer struct {
	grpc.ServerStream
}

func (x *iMDBGetFilmsServer) Send(m *Film) error {
	return x.ServerStream.SendMsg(m)
}

// IMDB_ServiceDesc is the grpc.ServiceDesc for IMDB service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IMDB_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "imdb.IMDB",
	HandlerType: (*IMDBServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetFilms",
			Handler:       _IMDB_GetFilms_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "imdb.proto",
}
